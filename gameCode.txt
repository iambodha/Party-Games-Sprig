/*
First time? Check out the tutorial game:
https://sprig.hackclub.com/gallery/getting_started

@title: 
@author: 
@tags: []
@img: ""
@addedOn: 2024-00-00
*/

const background = "b";
const character_arrow_right = ">"
const character_arrow_left = "<"
const colorPaletteMainMenu = ['C', '3', 'C', 'C', '1', '1', 'C', '2', '2', '3', '1', '1', '1', '1', 'C', '4'];
const colorPaletteSpy = ['C', '3', 'C', 'C', '1', '1', 'C', '2', '3', 'C', '1', '1', '1', '1', 'C', '4'];
const spyWords = ['       MrBeast','      McDonalds']

setLegend(
  [ background, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],
  [character_arrow_right, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000002000
0000000000002220
2222222222222222
2222222222222222
0000000000002220
0000000000002000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],
  [character_arrow_left, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0002000000000000
0222000000000000
2222222222222222
2222222222222222
0222000000000000
0002000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],
)

setSolids([])

let level = 0
let currentGameMode = 0
let gameSetting = 0
const levels = [
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbb>b
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
b<bbbbbbbbbbbbbbbb>b
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
b<bbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbb>b
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
b<bbbbbbbbbbbbbbbb>b
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
b<bbbbbbbbbbbbbbbb>b
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
b<bbbbbbbbbbbbbbbb>b
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
b<bbbbbbbbbbbbbbbb>b
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
b<bbbbbbbbbbbbbbbb>b
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
b<bbbbbbbbbbbbbbbb>b
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
b<bbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
  map`
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb`,
]

const levelTexts = [
  ["", "     Party Games", "", "", "   Choose the game", "", "", "", "         Spy", "", "Everyone gets a word", "  except the spies", "who try to guess the", "         word.", "", "      Confirm(W)"],
  ["", "     Party Games", "", "", "   Choose the game", "", "", "", "     Party Bomb", "", "Everyone has a theme", " ,say words related", " to the theme until ", " the bomb explodes.", "", "      Confirm(W)"],
  ["", "     Party Games", "", "", "   Choose the game", "", "", "", "      Paranoia", "", "    Ask questions", "   secretly, name", " someone, coin flip", "decides if you hear.", "", "      Confirm(W)"],
  ["", "         Spy", "", "", "   Choose the game", "        format", "", "", "      2 players", "        1 spy", "", "", "", "", "", "      Confirm(I)"],
  ["", "         Spy", "", "", "   Choose the game", "        format", "", "", "      3 players", "        1 spy", "", "", "", "", "", "      Confirm(I)"],
  ["", "         Spy", "", "", "   Choose the game", "        format", "", "", "      4 players", "        1 spy", "", "", "", "", "", "      Confirm(I)"],
  ["", "         Spy", "", "", "   Choose the game", "        format", "", "", "      5 players", "        1 spy", "", "", "", "", "", "      Confirm(I)"],
  ["", "         Spy", "", "", "   Choose the game", "        format", "", "", "      5 players", "        2 spy", "", "", "", "", "", "      Confirm(I)"],
  ["", "         Spy", "", "", "   Choose the game", "        format", "", "", "      6 players", "        2 spy", "", "", "", "", "", "      Confirm(I)"],
  ["", "         Spy", "", "", "   Choose the game", "        format", "", "", "      7 players", "        2 spy", "", "", "", "", "", "      Confirm(I)"],
  ["", "         Spy", "", "", "   Choose the game", "        format", "", "", "      8 players", "        2 spy", "", "", "", "", "", "      Confirm(I)"],
  ["", "         Spy", "", "", "", "", "", "     You are the", "         Spy","", "", "", "", "", "", "      Confirm(K)"],
  ["", "         Spy", "", "", "", "", "", "     The word is", "","", "", "", "", "", "", "      Confirm(K)"],
  ["", "         Spy", "", "", "", "", "", " Pass to next person", "","", "", "", "", "", "", "      Confirm(K)"],
];

function addLevelTexts(colorPalette) {
  for (let i = 0; i < levelTexts[level].length; i++) {
    addText(levelTexts[level][i], {
      x: 0,
      y: i,
      color: color`${colorPalette[i]}`
    });
  }
}

function clearAllText() {
  for (let i = 0; i < height(); i++) {
    clearText(i);
  }
}

function startSpyGameManager() {
  startSpyGame(gameSetting);
}

function startSpyGame(gameSetting) {
  clearAllText();

  const randomIndex = Math.floor(Math.random() * spyWords.length);
  const selectedWord = spyWords[randomIndex];

  const wordList = Array(gameSetting).fill(selectedWord);

  if (gameSetting <= 6) {
    const spyIndex = Math.floor(Math.random() * gameSetting);
    wordList[spyIndex] = 'SPY';
  } else if (gameSetting >= 7 && gameSetting <= 10) {
    const spyIndices = new Set();
    while (spyIndices.size < 2) {
      spyIndices.add(Math.floor(Math.random() * gameSetting));
    }
    spyIndices.forEach(index => {
      wordList[index] = 'SPY';
    });
  }

  // Alternate addition of "WAIT" after each original word
  const newList = [];
  wordList.forEach((word, index) => {
    newList.push(word);
    if (index < wordList.length - 1) {
      newList.push("WAIT");
    }
  });

  let currentIndex = 0;

  function displayWord(index) {
    clearAllText();
    if (newList[index] === 'SPY') {
      level = 11;
      setMap(levels[level]);
      addLevelTexts(colorPaletteSpy);
    } else if (newList[index] === 'WAIT') {
      level = 13;
      setMap(levels[level]);
      addLevelTexts(colorPaletteMainMenu);
    } else {
      level = 12;
      setMap(levels[level]);
      addLevelTexts(colorPaletteMainMenu);
      addText(newList[index], {
        x: 0,
        y: 8,
        color: color`${colorPaletteMainMenu[8]}`
      });
    }
  }

  displayWord(currentIndex);

  onInput("k", () => {
    currentIndex++;
    if (currentIndex < newList.length) {
      displayWord(currentIndex);
    } else {
      clearAllText();
      // Optionally, add code here to handle the end of the word list
    }
  });
}


addLevelTexts(colorPaletteMainMenu);

setMap(levels[level])

onInput("d", () => {
  if (level >= 0 && level < 2) {
    level = Math.min(level + 1, 2);
    clearAllText();
    setMap(levels[level]);
    addLevelTexts(colorPaletteMainMenu);
    currentGameMode = level;
  }
  if (level >= 3 && level < 10) {
    level = Math.min(level + 1, 10);
    clearAllText();
    setMap(levels[level]);
    addLevelTexts(colorPaletteMainMenu);
  }
});

onInput("a", () => {
  if (level > 0 && level <= 2) {
    level = Math.max(level - 1, 0);
    clearAllText();
    setMap(levels[level]);
    addLevelTexts(colorPaletteMainMenu);
    currentGameMode = level;
  }
  if (level > 3 && level <= 10) {
    level = Math.max(level - 1, 2);
    clearAllText();
    setMap(levels[level]);
    addLevelTexts(colorPaletteMainMenu);
  }
});

onInput("w", () => {
  if (currentGameMode === 0) {
    level = 3;
    clearAllText();
    setMap(levels[level]);
    addLevelTexts(colorPaletteMainMenu);
  }
});

onInput("i", () => {
  if (currentGameMode === 0 && level >= 3 && level <= 10) {
    gameSetting = level;
    startSpyGameManager();
  }
});

afterInput(() => {
  
})